import uuid
from pydantic import BaseModel, Field
from typing import List, Optional, Dict
from datetime import datetime

class Question(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique identifier for the question")
    text: str = Field(description="The text of the question")
    time_limit_sec: int = Field(description="The time limit for the question in seconds")
    order: int = Field(description="The order of the question in the campaign")

class Campaign(BaseModel):
    id: Optional[str] = Field(None, description="The unique identifier for the campaign, generated by the backend")
    campaign_name: str = Field(description="The name of the campaign")
    campaign_description: Optional[str] = Field(None, description="The description of the campaign")
    campaign_type: str = Field(default="interview", description="The type of campaign: 'interview' or 'tell-us'")
    questions: List[Question] = Field(description="The questions for the campaign")
    
    # Flattened from quality_params
    customer_name: Optional[str] = Field(default="", description="The name of the customer")
    completed_url: Optional[str] = Field(default="", description="The URL to redirect to after completion")
    quality_url: Optional[str] = Field(default="", description="The URL for quality control")

    # Flattened from screening_params
    screenout_url: Optional[str] = Field(default="", description="The URL to redirect to if screened out")
    demographic_fields: Optional[List[Dict]] = Field(default_factory=list, description="The demographic fields for the campaign")
    screenout_questions: Optional[List[Dict]] = Field(default_factory=list, description="The screenout questions for the campaign")

    voice_capability: Optional[bool] = Field(default=False, description="Whether voice recording is enabled for tell-us campaigns")
    
    created_at: datetime = Field(default_factory=datetime.utcnow, description="The date and time the campaign was created")
    updated_at: Optional[datetime] = Field(default_factory=datetime.utcnow, description="The date and time the campaign was last updated")

class Demographics(BaseModel):
    gender: Optional[str] = Field(default=None, description="The gender of the participant")
    age: Optional[int] = Field(default=None, description="The age of the participant")
    city: Optional[str] = Field(default=None, description="The city of the participant")
    income: Optional[str] = Field(default=None, description="The income range of the participant")
    occupation: Optional[str] = Field(default=None, description="The occupation of the participant")

class Recording(BaseModel):
    question_id: str = Field(description="The unique identifier for the question")
    file_path: str = Field(description="The path to the recording file")
    duration_sec: float = Field(description="The duration of the recording in seconds")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="The date and time the recording was created")

class InterviewResponse(BaseModel):
    campaign_id: str = Field(description="The unique identifier for the campaign")
    participant_id: str = Field(description="The unique identifier for the participant")
    demographics: Demographics = Field(description="The demographics of the participant")
    submitted_at: datetime = Field(default_factory=datetime.utcnow, description="The date and time the response was submitted")